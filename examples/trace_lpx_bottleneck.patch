--- a/src/lpx_file_server.cpp
+++ b/src/lpx_file_server.cpp
@@ -303,6 +303,9 @@ void FileLPXServer::handleMovementCommand(const MovementCommand& cmd) {
 void FileLPXServer::videoThread() {
     float frameDelayMs = 1000.0f / targetFPS;
     std::cout << "Frame delay: " << frameDelayMs << "ms" << std::endl;
+    
+    bool isFirstFrame = true;
+    std::cout << "[TRACE] Video thread starting, waiting for first client..." << std::endl;
     
     auto lastFrameTime = std::chrono::high_resolution_clock::now();
     
@@ -316,12 +319,18 @@ void FileLPXServer::videoThread() {
         }
         
         // Skip processing if no clients connected
+        auto clientCheckStart = std::chrono::high_resolution_clock::now();
         {
             std::lock_guard<std::mutex> lock(clientsMutex);
             if (clientSockets.empty()) {
                 // Reduced sleep for faster client recognition
                 std::this_thread::sleep_for(std::chrono::milliseconds(20));
                 continue;
+            } else if (isFirstFrame) {
+                auto clientCheckEnd = std::chrono::high_resolution_clock::now();
+                auto waitTime = std::chrono::duration_cast<std::chrono::milliseconds>(clientCheckEnd - clientCheckStart).count();
+                std::cout << "[TRACE] First client detected, waited " << waitTime << "ms for client connection" << std::endl;
+                std::cout << "[TRACE] About to process first frame..." << std::endl;
             }
         }
         
@@ -339,6 +348,15 @@ void FileLPXServer::videoThread() {
             }
         }
         
+        if (isFirstFrame) {
+            auto frameReadEnd = std::chrono::high_resolution_clock::now();
+            auto frameReadTime = std::chrono::duration_cast<std::chrono::milliseconds>(frameReadEnd - clientCheckStart).count();
+            std::cout << "[TRACE] First frame read from video in " << frameReadTime << "ms" << std::endl;
+        }
+        
         currentFrame++;
+        if (isFirstFrame) {
+            std::cout << "[TRACE] Starting preprocessing for first frame..." << std::endl;
+        }
         
         // Convert to RGB (LPXImage expects RGB format)
         cv::Mat frameRGB;
@@ -348,14 +366,30 @@ void FileLPXServer::videoThread() {
         if (frameRGB.cols != outputWidth || frameRGB.rows != outputHeight) {
             cv::resize(frameRGB, frameRGB, cv::Size(outputWidth, outputHeight));
         }
+        
+        if (isFirstFrame) {
+            auto preprocessEnd = std::chrono::high_resolution_clock::now();  
+            auto preprocessTime = std::chrono::duration_cast<std::chrono::milliseconds>(preprocessEnd - clientCheckStart).count();
+            std::cout << "[TRACE] First frame preprocessing completed in " << preprocessTime << "ms" << std::endl;
+            std::cout << "[TRACE] About to call multithreadedScanImage for first frame..." << std::endl;
+        }
         
         // Process the frame with LPX transform
         auto lpxProcessStart = std::chrono::high_resolution_clock::now();
         float centerX = outputWidth / 2.0f + centerXOffset;
         float centerY = outputHeight / 2.0f + centerYOffset;
         
+        if (isFirstFrame) {
+            std::cout << "[TRACE] Calling multithreadedScanImage with center (" << centerX << ", " << centerY << ")" << std::endl;
+        }
+        
         auto lpxImage = multithreadedScanImage(frameRGB, centerX, centerY);
         auto lpxProcessEnd = std::chrono::high_resolution_clock::now();
         auto lpxDuration = std::chrono::duration_cast<std::chrono::milliseconds>(lpxProcessEnd - lpxProcessStart).count();
+        
+        if (isFirstFrame) {
+            std::cout << "[TRACE] multithreadedScanImage returned for first frame in " << lpxDuration << "ms" << std::endl;
+        }
         
         // Log slow LPX processing
         if (lpxDuration > 100) {  // Log if processing takes more than 100ms
@@ -363,6 +397,10 @@ void FileLPXServer::videoThread() {
         }
         
         if (lpxImage) {
+            if (isFirstFrame) {
+                std::cout << "[TRACE] First LPX image generated successfully, adding to queue..." << std::endl;
+            }
+            
             // Add to broadcast queue
             std::unique_lock<std::mutex> lock(lpxImageMutex);
             
@@ -375,6 +413,11 @@ void FileLPXServer::videoThread() {
             lock.unlock();
             
             lpxImageCondition.notify_one();
+            
+            if (isFirstFrame) {
+                auto totalFirstFrameTime = std::chrono::duration_cast<std::chrono::milliseconds>(lpxProcessEnd - clientCheckStart).count();
+                std::cout << "[TRACE] First frame fully processed and queued in " << totalFirstFrameTime << "ms total" << std::endl;
+            }
             
             // Report progress periodically
             if (currentFrame % 100 == 0 || currentFrame == totalFrames) {
@@ -383,6 +426,10 @@ void FileLPXServer::videoThread() {
             }
         }
         
+        if (isFirstFrame) {
+            std::cout << "[TRACE] First frame processing complete, future frames will be faster" << std::endl;
+            isFirstFrame = false;
+        }
+        
         // Control FPS
         auto now = std::chrono::high_resolution_clock::now();
         auto elapsedMs = std::chrono::duration_cast<std::chrono::milliseconds>(
