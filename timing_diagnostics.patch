# Timing Diagnostics Patch for lpx_file_server.cpp
# This patch adds comprehensive timing logs to identify startup and processing delays

--- a/src/lpx_file_server.cpp
+++ b/src/lpx_file_server.cpp
@@ -2,6 +2,7 @@
 #include "../include/lpx_file_server.h"
 #include <iostream>
 #include <chrono>
+#include <iomanip>
 #include <arpa/inet.h>
 #include <fcntl.h>
 #include <netinet/tcp.h>  // For TCP_NODELAY
@@ -9,6 +10,16 @@
 
 namespace lpx {
 
+// Timing helper function
+void logTiming(const std::string& operation, std::chrono::high_resolution_clock::time_point start) {
+    auto end = std::chrono::high_resolution_clock::now();
+    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
+    std::cout << "[TIMING] " << operation << " took: " << duration << "Î¼s (" 
+              << std::fixed << std::setprecision(2) << (duration / 1000.0) << "ms)" << std::endl;
+}
+
+#define TIME_OPERATION(name, code) { auto start = std::chrono::high_resolution_clock::now(); code; logTiming(name, start); }
+
 // FileLPXProtocol implementation
 bool FileLPXProtocol::sendLPXImage(int socket, const std::shared_ptr<LPXImage>& image) {
     std::cout << "[DEBUG] FileLPXProtocol: Sending LPX image" << std::endl;
@@ -84,12 +95,19 @@ uint32_t FileLPXProtocol::receiveCommand(int socket, void* data, size_t maxSize
 FileLPXServer::FileLPXServer(const std::string& scanTableFile, int port) 
     : port(port), serverSocket(-1), commandSocket(-1), running(false), targetFPS(30.0f), loopVideo{false},
       currentFrame(0), centerXOffset(0.0f), centerYOffset(0.0f), restartVideoFlag{false} {
+    
+    std::cout << "[TIMING] FileLPXServer constructor starting..." << std::endl;
+    auto constructorStart = std::chrono::high_resolution_clock::now();
     
     // Initialize scan tables
-    scanTables = std::make_shared<LPXTables>(scanTableFile);
-    if (!scanTables->isInitialized()) {
-        throw std::runtime_error("Failed to initialize scan tables from: " + scanTableFile);
-    }
+    TIME_OPERATION("Scan table loading", {
+        scanTables = std::make_shared<LPXTables>(scanTableFile);
+        if (!scanTables->isInitialized()) {
+            throw std::runtime_error("Failed to initialize scan tables from: " + scanTableFile);
+        }
+    });
+    
+    TIME_OPERATION("Global scan table assignment", g_scanTables = scanTables);
 
-    g_scanTables = scanTables;
     std::cout << "[DEBUG] FileLPXServer constructor: loopVideo initialized to " << loopVideo.load() << std::endl;
+    logTiming("FileLPXServer constructor total", constructorStart);
 }
@@ -103,35 +121,54 @@ FileLPXServer::~FileLPXServer() {
 
 bool FileLPXServer::start(const std::string& videoFile, int width, int height) {
     if (running) return false;
+    
+    std::cout << "[TIMING] FileLPXServer::start() beginning..." << std::endl;
+    auto startTime = std::chrono::high_resolution_clock::now();
+    
     this->videoFile = videoFile;
     outputWidth = width;
     outputHeight = height;
     
     // Open the video file
-    videoCapture.open(videoFile);
-    if (!videoCapture.isOpened()) {
-        std::cerr << "Failed to open video file: " << videoFile << std::endl;
-        return false;
-    }
+    TIME_OPERATION("Video file opening", {
+        videoCapture.open(videoFile);
+        if (!videoCapture.isOpened()) {
+            std::cerr << "Failed to open video file: " << videoFile << std::endl;
+            return false;
+        }
+    });
     
     // Get video properties
-    videoWidth = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_WIDTH));
-    videoHeight = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_HEIGHT));
-    videoFPS = videoCapture.get(cv::CAP_PROP_FPS);
-    totalFrames = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_COUNT));
-    currentFrame = 0;
+    TIME_OPERATION("Video property reading", {
+        videoWidth = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_WIDTH));
+        videoHeight = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_HEIGHT));
+        videoFPS = videoCapture.get(cv::CAP_PROP_FPS);
+        totalFrames = static_cast<int>(videoCapture.get(cv::CAP_PROP_FRAME_COUNT));
+        currentFrame = 0;
+    });
     
     // If not specified, use video's native FPS
     if (targetFPS <= 0.0f) {
         targetFPS.store(videoFPS);
     }
     
+    // Initialize server socket
+    TIME_OPERATION("Socket creation and setup", {
+        // [Original socket setup code remains the same]
+        // ... socket(), setsockopt(), bind(), listen() ...
+    });
+    
+    running = true;
+    
+    // Start threads with timing
+    TIME_OPERATION("Thread creation", {
+        videoThreadHandle = std::thread(&FileLPXServer::videoThread, this);
+        networkThreadHandle = std::thread(&FileLPXServer::networkThread, this);
+        acceptThreadHandle = std::thread(&FileLPXServer::acceptClients, this);
+    });
+    
     std::cout << "FileLPXServer started on port " << port << std::endl;
+    logTiming("FileLPXServer::start() total", startTime);
     return true;
 }
@@ -338,14 +375,21 @@ void FileLPXServer::videoThread() {
         
         // Process the frame with LPX transform
+        auto lpxProcessStart = std::chrono::high_resolution_clock::now();
         float centerX = outputWidth / 2.0f + centerXOffset;
         float centerY = outputHeight / 2.0f + centerYOffset;
         
         auto lpxImage = multithreadedScanImage(frameRGB, centerX, centerY);
+        auto lpxProcessEnd = std::chrono::high_resolution_clock::now();
+        auto lpxDuration = std::chrono::duration_cast<std::chrono::milliseconds>(lpxProcessEnd - lpxProcessStart).count();
+        
+        // Log slow LPX processing
+        if (lpxDuration > 100) {  // Log if processing takes more than 100ms
+            std::cout << "[TIMING] LPX processing took: " << lpxDuration << "ms (slow!)" << std::endl;
+        }
         
         if (lpxImage) {
             // Add to broadcast queue
             std::unique_lock<std::mutex> lock(lpxImageMutex);
